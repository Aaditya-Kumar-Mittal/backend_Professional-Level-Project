MONGODB_URI=<your_mongodb_uri>
# Replace <your_mongodb_uri> with your actual MongoDB URI
# Ensure to keep the URI format as shown above
# If you are using a username and password, you can set them separately
# or include them in the URI directly.

PORT=<your_port>
# Replace <your_port> with the port number you want your server to run on
# Example: PORT=8000

CORS_ORIGIN=<your_cors_origin>
# Replace <your_cors_origin> with the origin you want to allow for CORS
# Example: CORS_ORIGIN=http://localhost:3000

ACCESS_TOKEN_SECRET=<your_jwt_access_token_secret>
# Replace <your_jwt_access_token_secret> with your JWT secret key
# Use a strong, random string for security
# node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"

REFRESH_TOKEN_SECRET=<your_jwt_refresh_token_secret>
# Replace <your_jwt_refresh_token_secret> with your JWT refresh token secret
# Example: JWT_REFRESH_TOKEN_SECRET=your_refresh_token_secret

ACCESS_TOKEN_EXPIRATION=<your_jwt_access_token_expiration>
# Replace <your_jwt_access_token_expiration> with the expiration time for access tokens
# Example: JWT_ACCESS_TOKEN_EXPIRATION=1d (1 day)

REFRESH_TOKEN_EXPIRATION=<your_jwt_refresh_token_expiration>
# Replace <your_jwt_refresh_token_expiration> with the expiration time for refresh tokens
# Example: JWT_REFRESH_TOKEN_EXPIRATION=10d (10 days)
# Note: Use a format like '1d' for 1 day, '2h' for 2 hours, etc.
# Ensure the expiration times are appropriate for your application's security needs
# Example: JWT_REFRESH_TOKEN_EXPIRATION=10d (10 days)